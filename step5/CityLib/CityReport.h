/**
 * @file CityReport.h
 *
 * @author Charles B. Owen
 *
 * The city report is generated by the members of the city.
 * It is a collection of objects of type MemberReport.
 */

#pragma once

#include <memory>
#include <vector>
#include <random>

class City;
class MemberReport;

/**
 * The city report is generated by the members of the city.
 * It is a collection of objects of type MemberReport.
*/
class CityReport
{
private:
    /// The city this report is for
    City* mCity;

    /// Random number generator
    std::mt19937 mRandom;

protected:
    /// Contents container location for a report
    class ReportHolder {
    public:
        /// The actual report
        std::shared_ptr<MemberReport> mReport;

        /// The next container or -1 for none
        int mNextContainer = -1;

        /// The next location in that container
        int mNextLocation = 0;
    };

    /// The number of containers to use
    static const int NumContainers = 3;

    /// The containers
    std::vector<std::shared_ptr<ReportHolder>> mContainers[NumContainers];

    /// The first container, initially -1 for no container
    int mFirstContainer = -1;

    /// The first location in the first container
    int mFirstLocation = 0;

    /// The container for the last record
    int mLastContainer = -1;

    /// The location in the container for the last record
    int mLastLocation = 0;

public:
    explicit CityReport(City* city);

    void Add(std::shared_ptr<MemberReport> report);

    class Iter
    {
    public:
        /** Constructor
         * @param collection The collection we are iterating over */
        Iter(CityReport *city_report, int location, int pos) : mCityReport(city_report),mLocation(location), mPos(pos) {}

        /** Test for end of the iterator
         * @return True if we this position equals not equal to the other position */
        bool operator!=(const Iter &other) const
        {
            return mPos != other.mPos || mLocation != other.mLocation;
        }

        /** Get value at current position
         * @return Value at mPos in the collection */
        std::shared_ptr<MemberReport> operator *() const {
            auto current = mCityReport->mContainers[mLocation][mPos];

            return current->mReport;
        }

        /** Increment the iterator
         * @return Reference to this iterator */
        const Iter& operator++()
        {

            auto current = mCityReport->mContainers[mLocation][mPos];
            mLocation= current->mNextContainer;
            mPos = current->mNextLocation;

            return *this;
        }

    private:
        CityReport *mCityReport;    ///< Collection we are iterating over
        int mPos;                  ///< Position in the collection
        int mLocation;           ///< Collection we are getting the location of
    };

    /**
     * Get an iterator for the beginning of the collection
     * @return Iter object at position 0
     */
     Iter begin() { return Iter(this, mFirstContainer, mFirstLocation); }

    /**
     * Get an iterator for the end of the collection
     * @return Iter object at position past the end
     */
     Iter end() { return Iter(this, -1 ,0); }
};

